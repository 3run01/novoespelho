#!/bin/bash
# deploy-single-mr.sh
# Uso: ./deploy-single-mr.sh <commit-hash> <feature-name>
# 
# Script seguro para criar branch limpa para MR baseada em produ√ß√£o

set -e

COMMIT_HASH=$1
FEATURE_NAME=$2
BRANCH_NAME="deploy/$FEATURE_NAME"
BASE_BRANCH="producao"

# Casos especiais: continuar cherry-pick ou mostrar ajuda
if [ "$1" = "continuar" ] && [ -n "$2" ]; then
    FEATURE_NAME=$2
    BRANCH_NAME="deploy/$FEATURE_NAME"
    
    echo "üîÑ Continuando processo para $BRANCH_NAME..."
    
    if git cherry-pick --continue; then
        echo "‚úÖ Cherry-pick finalizado!"
        git push -u origin "$BRANCH_NAME"
        echo "üéâ Branch $BRANCH_NAME enviada com sucesso!"
    else
        echo "‚ùå Ainda h√° conflitos para resolver"
    fi
    exit 0
fi

if [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "üìñ AJUDA - deploy-single-mr.sh"
    echo ""
    echo "USO:"
    echo "  $0 <commit-hash> <feature-name>"
    echo "  $0 continuar <feature-name>  # Para continuar ap√≥s resolver conflitos"
    echo ""
    echo "EXEMPLOS:"
    echo "  $0 a1b2c3d fix-login-bug"
    echo "  $0 continuar fix-login-bug"
    echo ""
    echo "FLUXO:"
    echo "  1. Script cria branch limpa baseada em 'producao'"
    echo "  2. Aplica apenas o commit espec√≠fico via cherry-pick"
    echo "  3. Push da branch para abrir MR sem hist√≥rico"
    exit 0
fi

# Valida√ß√£o de par√¢metros
if [ -z "$COMMIT_HASH" ] || [ -z "$FEATURE_NAME" ]; then
    echo "‚ùå ERRO: Uso correto: $0 <commit-hash> <feature-name>"
    echo "   Exemplo: $0 abc123 fix-login-bug"
    exit 1
fi

echo "üéØ Iniciando deploy do commit: $COMMIT_HASH ‚Üí branch $BRANCH_NAME"
echo "üìã Base: $BASE_BRANCH"

# Salva contexto atual (branch e stash se necess√°rio)
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
STASH_CREATED=false

echo "üìç Branch atual: $CURRENT_BRANCH"

# Verifica se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD -- 2>/dev/null; then
    echo "üíæ Detectadas mudan√ßas n√£o commitadas, criando stash tempor√°rio..."
    git stash push -m "deploy-script-auto-stash-$(date +%s)" --include-untracked
    STASH_CREATED=true
fi

# Fun√ß√£o de limpeza segura
cleanup() {
    echo "üßπ Executando limpeza..."
    
    # Aborta cherry-pick se estiver em andamento
    if [ -f .git/CHERRY_PICK_HEAD ]; then
        git cherry-pick --abort 2>/dev/null || true
    fi
    
    # Volta para branch original
    if [ "$CURRENT_BRANCH" != "$(git rev-parse --abbrev-ref HEAD 2>/dev/null)" ]; then
        git checkout "$CURRENT_BRANCH" 2>/dev/null || true
    fi
    
    # Remove branch criada se falhou
    if git show-ref --verify --quiet refs/heads/"$BRANCH_NAME" 2>/dev/null; then
        echo "üóëÔ∏è  Removendo branch criada: $BRANCH_NAME"
        git branch -D "$BRANCH_NAME" 2>/dev/null || true
    fi
    
    # Restaura stash se foi criado
    if [ "$STASH_CREATED" = true ]; then
        echo "üîÑ Restaurando mudan√ßas n√£o commitadas..."
        git stash pop --quiet 2>/dev/null || echo "‚ö†Ô∏è  N√£o foi poss√≠vel restaurar stash automaticamente"
    fi
}

trap cleanup ERR

# Verifica se o commit existe
echo "üîç Verificando se o commit existe..."
if ! git cat-file -e "$COMMIT_HASH"^{commit} 2>/dev/null; then
    echo "‚ùå ERRO: Commit $COMMIT_HASH n√£o encontrado!"
    echo "üí° Dica: Execute 'git log --oneline' para ver commits dispon√≠veis"
    exit 1
fi

# Mostra informa√ß√µes do commit
echo "üìù Commit selecionado:"
git show --no-patch --format="   %h - %s (%an, %ar)" "$COMMIT_HASH"

# Atualiza refer√™ncias remotas de forma segura
echo "üîÑ Atualizando refer√™ncias remotas..."
git fetch origin --prune

# Verifica se temos acesso ao remoto
if ! git ls-remote --exit-code origin >/dev/null 2>&1; then
    echo "‚ùå ERRO: N√£o √© poss√≠vel acessar o reposit√≥rio remoto"
    exit 1
fi

# Verifica se a branch de produ√ß√£o existe no remoto
if ! git ls-remote --exit-code origin "refs/heads/$BASE_BRANCH" >/dev/null 2>&1; then
    echo "‚ùå ERRO: Branch '$BASE_BRANCH' n√£o existe no remoto"
    echo "üí° Branches dispon√≠veis:"
    git ls-remote --heads origin | sed 's/.*refs\/heads\//   /'
    exit 1
fi

# Remove branch de deploy local se j√° existir
if git show-ref --verify --quiet refs/heads/"$BRANCH_NAME"; then
    echo "‚ö†Ô∏è  Removendo branch local existente: $BRANCH_NAME"
    git branch -D "$BRANCH_NAME"
fi

# Remove branch remota se existir (de forma segura)
if git ls-remote --exit-code origin "refs/heads/$BRANCH_NAME" >/dev/null 2>&1; then
    echo "üóëÔ∏è  Removendo branch remota existente: $BRANCH_NAME"
    git push origin --delete "$BRANCH_NAME" || {
        echo "‚ö†Ô∏è  N√£o foi poss√≠vel remover branch remota automaticamente"
        echo "üí° Remova manualmente se necess√°rio: git push origin --delete $BRANCH_NAME"
    }
fi

# Cria branch diretamente do commit remoto (m√©todo mais seguro)
echo "üåø Criando branch $BRANCH_NAME baseada em origin/$BASE_BRANCH..."
git checkout -b "$BRANCH_NAME" "origin/$BASE_BRANCH"

# Verifica que estamos na base correta
BASE_COMMIT=$(git rev-parse HEAD)
REMOTE_BASE_COMMIT=$(git rev-parse "origin/$BASE_BRANCH")

if [ "$BASE_COMMIT" != "$REMOTE_BASE_COMMIT" ]; then
    echo "‚ùå ERRO: Branch n√£o foi criada corretamente da base remota"
    exit 1
fi

echo "‚úÖ Branch criada na base: $(git rev-parse --short HEAD)"

# Aplica cherry-pick do commit espec√≠fico
echo "üçí Aplicando cherry-pick do commit $COMMIT_HASH..."
if git cherry-pick "$COMMIT_HASH" --no-edit; then
    echo "‚úÖ Cherry-pick aplicado com sucesso!"
    
    # Mostra resumo das altera√ß√µes
    echo ""
    echo "üìä Resumo das altera√ß√µes aplicadas:"
    git show --stat --format="" HEAD
    echo ""
    
else
    echo "‚ùå Cherry-pick falhou - h√° conflitos para resolver"
    echo ""
    echo "üîß Para resolver:"
    echo "   1. Resolva os conflitos nos arquivos indicados acima"
    echo "   2. git add <arquivos-resolvidos>"
    echo "   3. $0 continuar $FEATURE_NAME"
    echo ""
    echo "üö´ Para cancelar:"
    echo "   git cherry-pick --abort"
    echo "   git checkout $CURRENT_BRANCH"
    echo "   git branch -D $BRANCH_NAME"
    
    # N√£o faz cleanup autom√°tico para permitir resolu√ß√£o manual
    trap - ERR
    exit 1
fi

# Valida√ß√£o final: verifica hist√≥rico limpo
COMMITS_AHEAD=$(git rev-list --count "origin/$BASE_BRANCH..HEAD")
if [ "$COMMITS_AHEAD" -eq 1 ]; then
    echo "‚úÖ Hist√≥rico limpo: apenas 1 commit √† frente de $BASE_BRANCH"
else
    echo "‚ö†Ô∏è  ATEN√á√ÉO: $COMMITS_AHEAD commits √† frente (esperado: 1)"
    echo "üí° Verifique se o cherry-pick foi aplicado corretamente"
fi

# Push seguro para o remoto
echo "üöÄ Enviando branch para o remoto..."
if git push -u origin "$BRANCH_NAME"; then
    echo "‚úÖ Branch enviada com sucesso!"
else
    echo "‚ùå Falha no push - verifique conectividade e permiss√µes"
    exit 1
fi

echo ""
echo "üéâ ===== DEPLOY CONCLU√çDO ====="
echo "‚úÖ Branch: $BRANCH_NAME"
echo "üìã Base: $BASE_BRANCH ($(git rev-parse --short "origin/$BASE_BRANCH"))"
echo "üìù Commit: $(git rev-parse --short HEAD) - $(git log -1 --format="%s")"
echo "üåê Remoto: origin/$BRANCH_NAME"
echo ""
echo "üîó Pr√≥ximos passos:"
echo "   1. Abrir Merge Request: $BRANCH_NAME ‚Üí $BASE_BRANCH"
echo "   2. O MR ter√° hist√≥rico limpo (apenas 1 commit)"
echo "   3. Ap√≥s merge, a branch ser√° removida automaticamente"
echo ""

# Retorna ao contexto original de forma segura
git checkout "$CURRENT_BRANCH"

# Restaura stash se foi criado
if [ "$STASH_CREATED" = true ]; then
    echo "üîÑ Restaurando mudan√ßas n√£o commitadas..."
    if git stash pop --quiet; then
        echo "‚úÖ Mudan√ßas restauradas"
    else
        echo "‚ö†Ô∏è  Verifique o stash manualmente: git stash list"
    fi
fi

echo "üîô Voltou para: $CURRENT_BRANCH"
echo "üéØ Processo finalizado com sucesso!"